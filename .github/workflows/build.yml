name: Build

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published
  workflow_dispatch:

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Set the build number in MinVer.
  #MINVERBUILDMETADATA: build.${{github.run_number}}
  mysqlCurrentSqlMode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
  mysqlLegacySqlMode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  # Currently no ONLY_FULL_GROUP_BY, see #1167:
  maxConnections: 255
  "ConnectionStrings__Default": server=127.0.0.1;user id=root;password=Password12!;port=3306;sslmode=Preferred;database=Orleans;
jobs:
  build:
    name: Build-${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        db: [mysql] # we require a MySQL Instance to build the efbundler
        version: ["8.0.27"]
        os: [ubuntu-latest] # windows-latest, macOS-latest'
    steps:
      - name: Sets MINVERBUILDMETADATA to build.${{github.run_number}}
        run: |
          echo "MINVERBUILDMETADATA=build.${{github.run_number}}" >> $GITHUB_ENV
        if: github.event_name != 'release'
      - name: Pull ${{matrix.db}}:${{matrix.version}} and setup Docker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "Pulling ${{matrix.db}}:${{matrix.version}}"
          docker pull ${{matrix.db}}:${{matrix.version}}
      - name: Setup Test Database
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: pwsh
        run: |
              docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 3306:3306 -d '${{ matrix.db }}:${{ matrix.version }}'
              $waitMinutes = 5
              $pollingIntervalSeconds = 3
              $startTime = Get-Date
              $started = $false
              while (!($started = docker exec mysql mysqladmin --protocol=tcp -h localhost -P 3306 -u root -pPassword12! status) -and ((Get-Date) - $startTime).TotalMinutes -lt $waitMinutes)
              {
                Start-Sleep -Seconds $pollingIntervalSeconds
              }
              if (!$started)
              {
                throw "$(databaseServerType):$(databaseServerVersion) docker container failed to start in $(waitMinutes) minutes"
                exit 1
              }
      - name: Setup Database MySQL
        if: ${{matrix.os == 'ubuntu-latest'}}
        shell: pwsh
        run: |
          $mySqlCommand = "mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e ""SET GLOBAL sql_mode = '${{ env.mysqlCurrentSqlMode }}'; SET GLOBAL max_connections = ${{ env.maxConnections}}; CREATE DATABASE Orleans; """
          $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          $mySqlCommand
          Invoke-Expression $mySqlCommand
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
      - name: "Install .NET Core SDK"
        uses: actions/setup-dotnet@v3.2.0
      - name: "Dotnet Tool Restore"
        run: dotnet tool restore
        shell: pwsh
      - name: "Dotnet Cake Build"
        run: dotnet cake --target=Build
        shell: pwsh
        
      - name: Make ./migrator-linux-x64 directory
        run: mkdir -p ./migrator-linux-x64
      - name: Build Bundler for linux-x64 on ${{matrix.db}}:${{matrix.version}}
        run: dotnet ef migrations bundle --self-contained -r linux-x64 --verbose --configuration Release --project ./Source/WebScheduler.DataMigrations/WebScheduler.DataMigrations.csproj -o ./migrator-linux-x64/efbundle
      
      - name: Execute migrator-linux-x64 ${{matrix.db}}:${{matrix.version}} for test execution
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: ./migrator-linux-x64/efbundle
      - name: "Publish Artifact - migrator-linux-x64"
        uses: actions/upload-artifact@v3
        with:
          name: migrator-linux-x64
          path: "./migrator-linux-x64"
          
      - name: Make ./migrator-linux-musl-x64 directory
        run: mkdir -p ./migrator-linux-musl-x64
      - name: Build Bundler for linux-musl-x64 on ${{matrix.db}}:${{matrix.version}}
        run: dotnet ef migrations bundle --self-contained -r linux-musl-x64 --verbose --configuration Release --project ./Source/WebScheduler.DataMigrations/WebScheduler.DataMigrations.csproj -o ./migrator-linux-musl-x64/efbundle
      - name: "Publish Artifact - migrator-linux-musl-x64"
        uses: actions/upload-artifact@v3
        with:
          name: migrator-linux-musl-x64
          path: "./migrator-linux-musl-x64"
  
      - name: Dotnet Cake Test ${{matrix.db}}:${{matrix.version}}
        run: dotnet cake --target=Test
        shell: pwsh
      - name: "Dotnet Cake Publish"
        run: dotnet cake --target=Publish
        shell: pwsh
      - name: "Publish Artifact - WebScheduler.Server"
        uses: actions/upload-artifact@v3
        with:
          name: WebScheduler.Server
          path: "./Artifacts/Publish"
      - name: "Dotnet Cake Pack"
        run: dotnet cake --target=Pack
      - name: "Publish Artifact - NuGets"
        uses: actions/upload-artifact@v3
        with:
          name: NuGets
          path: "./Artifacts/Pack"
      - name: Cleanup ./Artifacts
        run: rm -rf ./Artifacts/Pack ./Artifacts/Publish
      - name: "Publish Test and Code Coverage Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: Test and Code Coverage Results - ${{matrix.os}}
          path: "./Artifacts"
      - name: "List all files"
        run: ls -R

  bundler-test:
    name: Test-${{matrix.os}}-${{matrix.db}}:${{matrix.version}}
    needs: ["build"]
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        db: [mysql]
        version: ["5.7.36","5.7.29", "8.0.22", "8.0.19","8.0.27", "5.7.33"]
        os: [ubuntu-latest] # windows-latest, macOS-latest
    steps:
      - name: Pull ${{matrix.db}}:${{matrix.version}} and setup Docker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "Pulling ${{matrix.db}}:${{matrix.version}}"
          docker pull ${{matrix.db}}:${{matrix.version}}
      - name: Setup Test Database
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: pwsh
        run: |
              docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 3306:3306 -d '${{ matrix.db }}:${{ matrix.version }}'
              $waitMinutes = 5
              $pollingIntervalSeconds = 3
              $startTime = Get-Date
              $started = $false
              while (!($started = docker exec mysql mysqladmin --protocol=tcp -h localhost -P 3306 -u root -pPassword12! status) -and ((Get-Date) - $startTime).TotalMinutes -lt $waitMinutes)
              {
                Start-Sleep -Seconds $pollingIntervalSeconds
              }
              if (!$started)
              {
                throw "$(databaseServerType):$(databaseServerVersion) docker container failed to start in $(waitMinutes) minutes"
                exit 1
              }
      - name: Setup Database MySQL - 8.0.27 ubuntu-latest
        if: ${{ matrix.version == '8.0.27' && matrix.os == 'ubuntu-latest'}}
        shell: pwsh
        run: |
          $mySqlCommand = "mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e ""SET GLOBAL sql_mode = '${{ env.mysqlCurrentSqlMode }}'; SET GLOBAL max_connections = ${{ env.maxConnections}}; CREATE DATABASE Orleans; """
          $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          $mySqlCommand
          Invoke-Expression $mySqlCommand
      - name: Setup Database MySQL Legacy - 5.7.36
        if: ${{ matrix.version == '5.7.36' }}
        shell: pwsh
        run: |
          $mySqlCommand = "mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e ""SET GLOBAL sql_mode = '${{ env.mysqlLegacySqlMode }}'; SET GLOBAL max_connections = ${{ env.maxConnections}}; CREATE DATABASE Orleans;"""
          $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          $mySqlCommand
          Invoke-Expression $mySqlCommand
      - name: Setup Database MySQL Legacy - 5.7.29
        if: ${{ matrix.version == '5.7.29' }}
        shell: pwsh
        run: |
          $mySqlCommand = "mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e ""SET GLOBAL sql_mode = '${{ env.mysqlLegacySqlMode }}'; SET GLOBAL max_connections = ${{ env.maxConnections}}; CREATE DATABASE Orleans;"""
          $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          $mySqlCommand
          Invoke-Expression $mySqlCommand
      - name: "Download Artifact - migrator"
        uses: actions/download-artifact@v3
        with:
          name: migrator-linux-x64
      - name: "List all files"
        run: ls -R
      - name: Execute efBundle ${{matrix.db}}:${{matrix.version}}
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: chmod +x ./efbundle && ./efbundle

  docker:
    name: Docker-${{matrix.os}}
    needs: ["build","bundler-test"]
    env:
      DOCKER_REGISTRY: registry.digitalocean.com
      DOCKER_REPOSITORY_NAME: web-scheduler
    environment: #TODO: Switch this to PR URL
       name: "DOCR registry.digitalocean.com/web-scheduler"
       url: https://registry.digitalocean.com/web-scheduler
    permissions:
      packages: write
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0
      - name: "Install .NET Core SDK"
        uses: actions/setup-dotnet@v3.2.0
      - name: "Dotnet Tool Restore"
        run: dotnet tool restore
        shell: pwsh
      - name: "Download Artifact - WebScheduler.Server"
        uses: actions/download-artifact@v3
        with:
          name: WebScheduler.Server
          path: "./WebScheduler.Server"
      - name: Download Artifact - Migrator
        uses: actions/download-artifact@v3
        with:
          name: migrator-linux-musl-x64 # We're targeting alpine so we require this binary RID
          path: "./migrator"
      - name: "Install QEMU"
        id: qemu
        uses: docker/setup-qemu-action@v2
      - name: "Available platforms"
        run: echo ${{steps.qemu.outputs.platforms}}
      - name: "Install Docker BuildX"
        uses: docker/setup-buildx-action@v2
      - name: "Docker Login"
        run: echo ${{secrets.DOCR_PASSWORD}} | docker login ${{env.DOCKER_REGISTRY}} --username ${{secrets.DOCR_USER}} --password-stdin
        shell: pwsh
      - name: "Dotnet Cake DockerBuild"
        run: dotnet cake --target=DockerBuild --push=${{github.event_name == 'release'}}
        shell: pwsh
      - name: "List all files"
        run: ls -R
      - name: Read file contents from DOCKER_TAG
        id: read_file
        uses: andstor/file-reader-action@v1
        with:
          path: "./DOCKER_TAG"
      - name: DigitalOcean App Platform deployment
        if:  github.event_name == 'release'
        uses: digitalocean/app_action@main
        with:
          app_name: web-scheduler
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          images: '[
              {
                "name": "web-scheduler-server",
                "repository": "${{env.DOCKER_REGISTRY}}/${{env.DOCKER_REPOSITORY_NAME}}/webscheduler-server",
                "tag": "${{ steps.read_file.outputs.contents }}"
              },
              {
                "name": "web-scheduler-datamigrator-job",
                "repository": "${{env.DOCKER_REGISTRY}}/${{env.DOCKER_REPOSITORY_NAME}}/webscheduler-datamigrations",
                "tag": "${{ steps.read_file.outputs.contents }}"
              }]'

  push-github-packages:
    name: "Push GitHub Packages"
    needs: ["build","bundler-test","docker"]
    environment:
      name: "GitHub Packages"
      url: https://github.com/web-scheduler/web-scheduler/packages
    permissions:
      packages: write
    runs-on: windows-latest
    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v3
        with:
          name: NuGets
      - name: "Dotnet NuGet Add Source"
        run: dotnet nuget add source https://nuget.pkg.github.com/web-scheduler/index.json --name GitHub --username web-scheduler --password ${{secrets.GITHUB_TOKEN}}
        shell: pwsh
      - name: "Dotnet NuGet Push"
        run: dotnet nuget push .\**\*.nupkg --api-key ${{ github.token }} --skip-duplicate --source GitHub
        shell: pwsh

  push-nuget:
    name: "Push NuGet Packages"
    needs: ["build","bundler-test","docker"]
    if: github.event_name == 'release'
    environment:
      name: "NuGet"
      url: https://www.nuget.org/profiles/web-scheduler
    runs-on: ubuntu-latest
    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v3
        with:
          name: NuGets
      - name: "Dotnet NuGet Push"
        run: |
          Get-ChildItem -Recurse .\ -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} }
        shell: pwsh

  
  build_release_matrix:
    name: Generate Release Assets List
    runs-on: ubuntu-latest
    needs: ["build","bundler-test","docker"]
    if: github.event_name == 'release'
    strategy:
      matrix:
        artifacts:
          - data:
            - name: migrator-linux-x64
              arch: linux-x64
              outputFile: migrator
              type: executables-only
            - name: migrator-linux-musl-x64
              arch: linux-musl-x64
              outputFile: migrator
              type: executables-only
            - name: WebScheduler.Server
              arch: all
              outputFile: WebScheduler.Server
              type: folder
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.result }}
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Generate Matrix
        id: generate-matrix
        env:
          ARTIFACTS: ${{ toJSON(matrix.artifacts) }}
        run: jq -r -n 'env.ARTIFACTS | fromjson | @json "::set-output name=result::\(.data)"'
      - name: Set tag
        id: set-tag
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"

  attach_assets_to_release:
    permissions:
      contents: write  # publishing releases
    name: Upload Release Asset ${{ matrix.artifact.name}} for tag ${{ needs.build_release_matrix.outputs.tag }}
    needs: [build_release_matrix]
    strategy:
      fail-fast: false
      matrix:
        artifact:  ${{ fromJson(needs.build_release_matrix.outputs.matrix) }}
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    env:
      TAG_NAME: ${{ needs.build_release_matrix.outputs.tag }}
      OUTPUT_FILE: ${{ matrix.artifact.outputFile}}-${{ needs.build_release_matrix.outputs.tag }}-${{ matrix.artifact.arch}}.tar.gz
    steps:
    - name: "Checkout"
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    - name: "Download Artifact - ${{ matrix.artifact.name}}"
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact.name}}
        path: ${{ matrix.artifact.name}}
    - name: Set executable bit for type=executables-only
      if: ${{ matrix.artifact.type == 'executables-only'}}
      shell: bash
      run: chmod -R +x ${{ matrix.artifact.name}}/
    - name: Add Asset ${{ matrix.artifact.name}} to Release ${{ env.TAG_NAME }} as ${{ env.OUTPUT_FILE}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ${{ matrix.artifact.name}}
        tar -czvf "../$OUTPUT_FILE" .
        hub release edit "$TAG_NAME" -m "" -a "../$OUTPUT_FILE"
    - name: List Files
      run: ls -R
